# -*- coding: utf-8 -*-
"""StocksRevenue.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1En-51PxGxLIqGIyY6iPjZXrqS3ctL2vv
"""

!pip install yfinance
!pip install bs4
!pip install nbformat
!pip install --upgrade plotly

import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots

import plotly.io as pio
pio.renderers.default = "iframe"

import warnings
# Ignore all warnings
warnings.filterwarnings("ignore", category=FutureWarning)

"""## Extracting Stock Data for TSLA and NVDA

"""

Tesla = yf.Ticker("TSLA") # Extracting Tesla Stocks
Tesla_data=Tesla.history(period="max")
Tesla_data.reset_index(inplace=True)
Tesla_data.head()

Nvidia = yf.Ticker("NVDA") # Extracting Nvidia Stocks
Nvidia_data=Nvidia.history(period="max")
Nvidia_data.reset_index(inplace=True)
Nvidia_data.head()

"""## Using Webscraping to Extracting Tesla and Nvidia Revenue Data

"""

url="https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue"
html_data= requests.get(url).text #Get method and request the url

soup = BeautifulSoup(html_data,"html.parser") #Parsing the html data
a=soup.find_all("tbody")[1].find_all("tr") # Counting the tags of the table [1]
len(a)

tesla_revenue=pd.DataFrame(columns=["Date","Revenue"])
for row in soup.find_all("tbody")[1].find_all("tr"):
    col = row.find_all("td")
    date = col[0].text
    revenue = col[1].text
    tesla_revenue = pd.concat([tesla_revenue,pd.DataFrame({"Date":[date], "Revenue":[revenue]})], ignore_index=True)

tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',|\$',"",regex=True)# Removing commas and dollar signs from "Revenue"
tesla_revenue.dropna(inplace=True)# Removing null and empty strings from "Revenue"
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]

url="https://www.macrotrends.net/stocks/charts/NVDA/nvidia/revenue"
html_data2= requests.get(url).text

soup2 = BeautifulSoup(html_data2,"html.parser")

nvda_revenue=pd.DataFrame(columns=["Date","Revenue"])
for row in soup2.find_all("tbody")[1].find_all("tr"):
    col = row.find_all("td")
    date = col[0].text
    revenue = col[1].text
    nvda_revenue = pd.concat([nvda_revenue,pd.DataFrame({"Date":[date], "Revenue":[revenue]})], ignore_index=True)

nvda_revenue["Revenue"] = nvda_revenue['Revenue'].str.replace(',|\$',"",regex=True)
nvda_revenue.dropna(inplace=True)
nvda_revenue = nvda_revenue[nvda_revenue['Revenue'] != ""]
nvda_revenue.head()

"""## Plotting Stock Graphs

"""

def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    stock_data_specific = stock_data[stock_data.Date <= '2021-06-14']
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True), y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True), y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
    height=900,
    title=stock,
    xaxis_rangeslider_visible=True)
    fig.show()
    from IPython.display import display, HTML
    fig_html = fig.to_html()
    display(HTML(fig_html))

make_graph(Tesla_data,tesla_revenue,'Tesla')
make_graph(Nvidia_data,nvda_revenue,'Tesla')